/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type CallStruct = {
  target: string;
  value: BigNumberish;
  callData: BytesLike;
  allowFailure: boolean;
  isDelegateCall: boolean;
};

export type CallStructOutput = [string, BigNumber, string, boolean, boolean] & {
  target: string;
  value: BigNumber;
  callData: string;
  allowFailure: boolean;
  isDelegateCall: boolean;
};

export interface CoWShedFactoryInterface extends utils.Interface {
  functions: {
    "addr(bytes32)": FunctionFragment;
    "baseName()": FunctionFragment;
    "baseNode()": FunctionFragment;
    "executeHooks((address,uint256,bytes,bool,bool)[],bytes32,uint256,address,bytes)": FunctionFragment;
    "forwardResolutionNodeToAddress(bytes32)": FunctionFragment;
    "implementation()": FunctionFragment;
    "initializeEns(address)": FunctionFragment;
    "initializeProxy(address,bool)": FunctionFragment;
    "name(bytes32)": FunctionFragment;
    "ownerOf(address)": FunctionFragment;
    "proxyOf(address)": FunctionFragment;
    "reverseResolutionNodeToAddress(bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addr"
      | "baseName"
      | "baseNode"
      | "executeHooks"
      | "forwardResolutionNodeToAddress"
      | "implementation"
      | "initializeEns"
      | "initializeProxy"
      | "name"
      | "ownerOf"
      | "proxyOf"
      | "reverseResolutionNodeToAddress"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "baseName", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeHooks",
    values: [CallStruct[], BytesLike, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardResolutionNodeToAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeEns",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeProxy",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "ownerOf", values: [string]): string;
  encodeFunctionData(functionFragment: "proxyOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reverseResolutionNodeToAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardResolutionNodeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeEns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxyOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reverseResolutionNodeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "COWShedBuilt(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "COWShedBuilt"): EventFragment;
}

export interface COWShedBuiltEventObject {
  user: string;
  shed: string;
}
export type COWShedBuiltEvent = TypedEvent<
  [string, string],
  COWShedBuiltEventObject
>;

export type COWShedBuiltEventFilter = TypedEventFilter<COWShedBuiltEvent>;

export interface CoWShedFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoWShedFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addr(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    baseName(overrides?: CallOverrides): Promise<[string]>;

    baseNode(overrides?: CallOverrides): Promise<[string]>;

    executeHooks(
      calls: CallStruct[],
      nonce: BytesLike,
      deadline: BigNumberish,
      user: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forwardResolutionNodeToAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initializeEns(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeProxy(
      user: string,
      withEns: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    ownerOf(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    proxyOf(who: string, overrides?: CallOverrides): Promise<[string]>;

    reverseResolutionNodeToAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addr(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  baseName(overrides?: CallOverrides): Promise<string>;

  baseNode(overrides?: CallOverrides): Promise<string>;

  executeHooks(
    calls: CallStruct[],
    nonce: BytesLike,
    deadline: BigNumberish,
    user: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forwardResolutionNodeToAddress(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initializeEns(
    user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeProxy(
    user: string,
    withEns: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  ownerOf(arg0: string, overrides?: CallOverrides): Promise<string>;

  proxyOf(who: string, overrides?: CallOverrides): Promise<string>;

  reverseResolutionNodeToAddress(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addr(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    baseName(overrides?: CallOverrides): Promise<string>;

    baseNode(overrides?: CallOverrides): Promise<string>;

    executeHooks(
      calls: CallStruct[],
      nonce: BytesLike,
      deadline: BigNumberish,
      user: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    forwardResolutionNodeToAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initializeEns(user: string, overrides?: CallOverrides): Promise<void>;

    initializeProxy(
      user: string,
      withEns: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    name(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    ownerOf(arg0: string, overrides?: CallOverrides): Promise<string>;

    proxyOf(who: string, overrides?: CallOverrides): Promise<string>;

    reverseResolutionNodeToAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "COWShedBuilt(address,address)"(
      user?: null,
      shed?: null
    ): COWShedBuiltEventFilter;
    COWShedBuilt(user?: null, shed?: null): COWShedBuiltEventFilter;
  };

  estimateGas: {
    addr(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    baseName(overrides?: CallOverrides): Promise<BigNumber>;

    baseNode(overrides?: CallOverrides): Promise<BigNumber>;

    executeHooks(
      calls: CallStruct[],
      nonce: BytesLike,
      deadline: BigNumberish,
      user: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forwardResolutionNodeToAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initializeEns(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initializeProxy(
      user: string,
      withEns: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    proxyOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    reverseResolutionNodeToAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addr(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeHooks(
      calls: CallStruct[],
      nonce: BytesLike,
      deadline: BigNumberish,
      user: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forwardResolutionNodeToAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeEns(
      user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeProxy(
      user: string,
      withEns: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyOf(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reverseResolutionNodeToAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
