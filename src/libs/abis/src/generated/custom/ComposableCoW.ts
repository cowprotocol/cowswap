/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export declare namespace IConditionalOrder {
  export type ConditionalOrderParamsStruct = {
    handler: PromiseOrValue<string>
    salt: PromiseOrValue<BytesLike>
    staticInput: PromiseOrValue<BytesLike>
  }

  export type ConditionalOrderParamsStructOutput = [string, string, string] & {
    handler: string
    salt: string
    staticInput: string
  }
}

export declare namespace GPv2Order {
  export type DataStruct = {
    sellToken: PromiseOrValue<string>
    buyToken: PromiseOrValue<string>
    receiver: PromiseOrValue<string>
    sellAmount: PromiseOrValue<BigNumberish>
    buyAmount: PromiseOrValue<BigNumberish>
    validTo: PromiseOrValue<BigNumberish>
    appData: PromiseOrValue<BytesLike>
    feeAmount: PromiseOrValue<BigNumberish>
    kind: PromiseOrValue<BytesLike>
    partiallyFillable: PromiseOrValue<boolean>
    sellTokenBalance: PromiseOrValue<BytesLike>
    buyTokenBalance: PromiseOrValue<BytesLike>
  }

  export type DataStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    string,
    BigNumber,
    string,
    boolean,
    string,
    string
  ] & {
    sellToken: string
    buyToken: string
    receiver: string
    sellAmount: BigNumber
    buyAmount: BigNumber
    validTo: number
    appData: string
    feeAmount: BigNumber
    kind: string
    partiallyFillable: boolean
    sellTokenBalance: string
    buyTokenBalance: string
  }
}

export interface ComposableCoWInterface extends utils.Interface {
  functions: {
    'createWithContext((address,bytes32,bytes),address,bytes,bool)': FunctionFragment
    'singleOrders(address,bytes32)': FunctionFragment
    'getTradeableOrderWithSignature(address,(address,bytes32,bytes),bytes,bytes32[])': FunctionFragment
    'remove(bytes32)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic: 'createWithContext' | 'singleOrders' | 'getTradeableOrderWithSignature' | 'remove'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'createWithContext',
    values: [
      IConditionalOrder.ConditionalOrderParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'singleOrders',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getTradeableOrderWithSignature',
    values: [
      PromiseOrValue<string>,
      IConditionalOrder.ConditionalOrderParamsStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string
  encodeFunctionData(functionFragment: 'remove', values: [PromiseOrValue<BytesLike>]): string

  decodeFunctionResult(functionFragment: 'createWithContext', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'singleOrders', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTradeableOrderWithSignature', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'remove', data: BytesLike): Result

  events: {}
}

export interface ComposableCoW extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ComposableCoWInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    createWithContext(
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      dispatch: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    singleOrders(
      safe: PromiseOrValue<string>,
      singleOrderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    getTradeableOrderWithSignature(
      owner: PromiseOrValue<string>,
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      offchainInput: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [GPv2Order.DataStructOutput, string] & {
        order: GPv2Order.DataStructOutput
        signature: string
      }
    >

    remove(
      singleOrderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  createWithContext(
    params: IConditionalOrder.ConditionalOrderParamsStruct,
    factory: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    dispatch: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  singleOrders(
    safe: PromiseOrValue<string>,
    singleOrderHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  getTradeableOrderWithSignature(
    owner: PromiseOrValue<string>,
    params: IConditionalOrder.ConditionalOrderParamsStruct,
    offchainInput: PromiseOrValue<BytesLike>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<
    [GPv2Order.DataStructOutput, string] & {
      order: GPv2Order.DataStructOutput
      signature: string
    }
  >

  remove(
    singleOrderHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    createWithContext(
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      dispatch: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    singleOrders(
      safe: PromiseOrValue<string>,
      singleOrderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    getTradeableOrderWithSignature(
      owner: PromiseOrValue<string>,
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      offchainInput: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [GPv2Order.DataStructOutput, string] & {
        order: GPv2Order.DataStructOutput
        signature: string
      }
    >

    remove(singleOrderHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    createWithContext(
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      dispatch: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    singleOrders(
      safe: PromiseOrValue<string>,
      singleOrderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTradeableOrderWithSignature(
      owner: PromiseOrValue<string>,
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      offchainInput: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    remove(
      singleOrderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    createWithContext(
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      factory: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      dispatch: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    singleOrders(
      safe: PromiseOrValue<string>,
      singleOrderHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTradeableOrderWithSignature(
      owner: PromiseOrValue<string>,
      params: IConditionalOrder.ConditionalOrderParamsStruct,
      offchainInput: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    remove(
      singleOrderHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
