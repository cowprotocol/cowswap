name: CI

on:
  # build on PR creation/updates, also when pushing to main/develop, or create a release
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main, develop]
    tags: [v*]


env:
  REPO_NAME_SLUG: cowswap
  PR_NUMBER: ${{ github.event.number }}
  REACT_APP_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  REACT_APP_PINATA_API_KEY: ${{ secrets.REACT_APP_PINATA_API_KEY }}
  REACT_APP_PINATA_SECRET_API_KEY: ${{ secrets.REACT_APP_PINATA_SECRET_API_KEY }}
  REACT_APP_SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  REACT_APP_BLOCKNATIVE_API_KEY: ${{ secrets.REACT_APP_BLOCKNATIVE_API_KEY }}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - name: Set output of cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Cache generated files
        id: cache-generated-files
        uses: actions/cache@v2
        with:
          path: |
            src/types/v3
            src/abis/types
            src/state/data
            src/locales
          key: ${{ runner.os }}-generatedFiles-${{ hashFiles('**/yarn.lock') }}

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - name: Load dependencies
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Load generated files
        id: cache-generated-files
        uses: actions/cache@v2
        with:
          path: |
            src/types/v3
            src/abis/types
            src/state/data
            src/locales
          key: ${{ runner.os }}-generatedFiles-${{ hashFiles('**/yarn.lock') }}

      - name: Unit Test
        run: yarn test

      # - name: Coveralls
      #   uses: coverallsapp/github-action@v1.1.2
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - name: Load dependencies
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Load generated files
        id: cache-generated-files
        uses: actions/cache@v2
        with:
          path: |
            src/types/v3
            src/abis/types
            src/state/data
          key: ${{ runner.os }}-generatedFiles-${{ hashFiles('**/yarn.lock') }}

      - name: Run linters
        uses: wearerequired/lint-action@v1
        with:
          github_token: ${{ secrets.github_token }}
          eslint: true
          eslint_args: "-c .eslintrc.json ."
          auto_fix: ${{ github.event_name == 'pull_request' }}
          prettier: true

      - name: Run eslint
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.owner.login != github.repository_owner }}
        run: yarn eslint .

  build:
    name: Build apps
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - name: Load dependencies
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Load generated files
        id: cache-generated-files
        uses: actions/cache@v2
        with:
          path: |
            src/types/v3
            src/abis/types
            src/state/data
            src/locales
          key: ${{ runner.os }}-generatedFiles-${{ hashFiles('**/yarn.lock') }}

      - name: Build Web Apps
        run: yarn build

      - name: Upload websites artifact
        uses: actions/upload-artifact@v2
        with:
          name: website
          path: build

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download website
        uses: actions/download-artifact@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 'Deploy to S3: PRaul'
        if: env.PR_NUMBER
        run: aws s3 sync website s3://${{ secrets.AWS_REVIEW_BUCKET_NAME }}/${{ env.REPO_NAME_SLUG }}/pr${{ env.PR_NUMBER }} --delete

      - name: 'PRaul: Comment PR with app URLs'
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            * **ðŸ”­ [GP Swap](${{ env.REVIEW_FEATURE_URL }})**: CoW Protocol v2 Swap UI
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
        if: env.PR_NUMBER
        env:
          REVIEW_FEATURE_URL: https://pr${{ env.PR_NUMBER }}--${{ env.REPO_NAME_SLUG }}.review.gnosisdev.com

      - name: 'Deploy to S3: Develop'
        if: github.ref == 'refs/heads/develop'
        run: aws s3 sync website s3://${{ secrets.AWS_DEV_BUCKET_NAME }} --delete

      - name: 'Deploy to S3: Staging'
        if: github.ref == 'refs/heads/main'
        run: aws s3 sync website s3://${{ secrets.AWS_STAGING_BUCKET_NAME }}/current --delete

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: 'Production deployment: Upload release build files to be deployed'
        if: startsWith(github.ref, 'refs/tags/v')
        run: aws s3 sync website s3://${{ secrets.AWS_STAGING_BUCKET_NAME }}/releases/${{ steps.get_version.outputs.VERSION }} --delete

      - name: 'Production deployment: Enable production deployment'
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: bash ./.github/scripts/prepare_production_deployment.sh
        env:
          PROD_DEPLOYMENT_HOOK_TOKEN: ${{ secrets.PROD_DEPLOYMENT_HOOK_TOKEN }}
          PROD_DEPLOYMENT_HOOK_URL: ${{ secrets.PROD_DEPLOYMENT_HOOK_URL }}
          VERSION_TAG: ${{ steps.get_version.outputs.VERSION }}

  integration-tests:
    name: Cypress
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Increase watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      # - name: Download website
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: website

      # Install deps only
      - name: Cypress install dependencies
        id: cypress-deps
        uses: cypress-io/github-action@v2
        # Do not consider failure a failure. Well, sort of.
        # See https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#steps-context
        continue-on-error: true
        with:
          runTests: false

      - name: Install Cypress binary
        id: cypress-bin
        # Only run if previous step failed
        if: steps.cypress-deps.outcome == 'failure'
        run: npx cypress install

      # Actually run tests, building repo
      - name: Cypress run
        id: cypress-run
        uses: cypress-io/github-action@v2
        with:
          # Uncomment to test the production release. Right now, it doens't work the automatic "connection"
          #   very likely it's related to Web3StatusMod!
          #   when un-commenting this, we need to uncomment also the "Download website" I added in this PR and prevent cypres from buildig the project again
          # start: yarn serve:ci
          start: yarn start:default
          wait-on: http://localhost:3000
          wait-on-timeout: 200
        env:
          CYPRESS_INTEGRATION_TEST_PRIVATE_KEY: ${{ secrets.CYPRESS_INTEGRATION_TEST_PRIVATE_KEY }}
          CYPRESS_INTEGRATION_TESTS_INFURA_KEY: ${{ secrets.CYPRESS_INTEGRATION_TESTS_INFURA_KEY }}

      # Open tmate ssh connection on failure for debugging
      # Uncomment when needed and push upstream
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
#        if: ${{ failure() }}