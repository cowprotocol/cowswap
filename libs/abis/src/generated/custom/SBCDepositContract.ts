/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export interface SBCDepositContractInterface extends utils.Interface {
  functions: {
    'claimWithdrawal(address)': FunctionFragment
    'withdrawableAmount(address)': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'claimWithdrawal' | 'withdrawableAmount'): FunctionFragment

  encodeFunctionData(functionFragment: 'claimWithdrawal', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'withdrawableAmount', values: [PromiseOrValue<string>]): string

  decodeFunctionResult(functionFragment: 'claimWithdrawal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawableAmount', data: BytesLike): Result

  events: {}
}

export interface SBCDepositContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SBCDepositContractInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    claimWithdrawal(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawableAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>
  }

  claimWithdrawal(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdrawableAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    claimWithdrawal(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    withdrawableAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    claimWithdrawal(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdrawableAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    claimWithdrawal(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdrawableAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
