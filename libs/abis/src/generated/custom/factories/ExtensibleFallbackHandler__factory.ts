/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type { ExtensibleFallbackHandler, ExtensibleFallbackHandlerInterface } from '../ExtensibleFallbackHandler'

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_defaultFallbackHandler',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'contract Safe',
        name: 'safe',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes4',
        name: 'selector',
        type: 'bytes4',
      },
      {
        indexed: false,
        internalType: 'contract IFallbackMethod',
        name: 'handler',
        type: 'address',
      },
    ],
    name: 'AddedSafeMethod',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'contract Safe',
        name: 'safe',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'oldHandler',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'newHandler',
        type: 'address',
      },
    ],
    name: 'ChangedDefaultFallbackHandler',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'contract Safe',
        name: 'safe',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes4',
        name: 'selector',
        type: 'bytes4',
      },
      {
        indexed: false,
        internalType: 'contract IFallbackMethod',
        name: 'oldHandler',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'contract IFallbackMethod',
        name: 'newHandler',
        type: 'address',
      },
    ],
    name: 'ChangedSafeMethod',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'contract Safe',
        name: 'safe',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes4',
        name: 'selector',
        type: 'bytes4',
      },
    ],
    name: 'RemovedSafeMethod',
    type: 'event',
  },
  {
    stateMutability: 'nonpayable',
    type: 'fallback',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newHandler',
        type: 'address',
      },
    ],
    name: 'setDefaultFallbackHandler',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'selector',
        type: 'bytes4',
      },
      {
        internalType: 'contract IFallbackMethod',
        name: 'newHandler',
        type: 'address',
      },
    ],
    name: 'setSafeMethod',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const

export class ExtensibleFallbackHandler__factory {
  static readonly abi = _abi
  static createInterface(): ExtensibleFallbackHandlerInterface {
    return new utils.Interface(_abi) as ExtensibleFallbackHandlerInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ExtensibleFallbackHandler {
    return new Contract(address, _abi, signerOrProvider) as ExtensibleFallbackHandler
  }
}
