/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from './common'

export declare namespace Multicall3 {
  export type CallStruct = {
    target: PromiseOrValue<string>
    callData: PromiseOrValue<BytesLike>
  }

  export type CallStructOutput = [string, string] & {
    target: string
    callData: string
  }

  export type ResultStruct = {
    success: PromiseOrValue<boolean>
    returnData: PromiseOrValue<BytesLike>
  }

  export type ResultStructOutput = [boolean, string] & {
    success: boolean
    returnData: string
  }
}

export interface Multicall3Interface extends utils.Interface {
  functions: {
    'getEthBalance(address)': FunctionFragment
    'tryAggregate(bool,(address,bytes)[])': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'getEthBalance' | 'tryAggregate'): FunctionFragment

  encodeFunctionData(functionFragment: 'getEthBalance', values: [PromiseOrValue<string>]): string

  encodeFunctionData(
    functionFragment: 'tryAggregate',
    values: [PromiseOrValue<boolean>, Multicall3.CallStruct[]]
  ): string

  decodeFunctionResult(functionFragment: 'getEthBalance', data: BytesLike): Result

  decodeFunctionResult(functionFragment: 'tryAggregate', data: BytesLike): Result

  events: {}
}

export interface Multicall3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this

  attach(addressOrName: string): this

  deployed(): Promise<this>

  interface: Multicall3Interface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>

  listeners(eventName?: string): Array<Listener>

  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this

  removeAllListeners(eventName?: string): this

  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  getEthBalance(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  tryAggregate(
    requireSuccess: PromiseOrValue<boolean>,
    calls: Multicall3.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    getEthBalance(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>
  }

  filters: {}

  estimateGas: {
    getEthBalance(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getEthBalance(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
