{"version":3,"sources":["custom/hooks/useTransactionConfirmationModal.tsx","custom/assets/cow-swap/arrow.svg","custom/pages/Account/LockedGnoVesting/claimData/index.ts","custom/pages/Account/LockedGnoVesting/hooks.ts","custom/pages/Account/LockedGnoVesting/index.tsx","custom/pages/Account/Balances.tsx"],"names":["useTransactionConfirmationModal","defaultOperationType","OperationType","WRAP_ETHER","useState","operationType","setOperationType","transactionConfirmationModalMsg","setTransactionConfirmationModalMsg","openTransactionConfirmationModalAux","useOpenModal","ApplicationModal","TRANSACTION_CONFIRMATION","closeModal","useCloseModals","showTransactionConfirmationModal","useModalIsOpen","openModal","useCallback","message","TransactionConfirmationModal","attemptingTxn","isOpen","pendingText","onDismiss","indexFiles","SupportedChainId","MAINNET","mainnetIndex","RINKEBY","rinkebyIndex","GNOSIS_CHAIN","gnosisChainIndex","GOERLI","goerliIndex","chainNames","fetchClaim","address","chainId","lowerCaseAddress","toLowerCase","supportedChainId","chainName","chunkIndex","lookupChunkIndex","fetchChunk","chunk","chunkIndexJson","nextChunkIndex","findIndex","a","length","chunkCache","Map","path","promise","get","fetch","then","res","json","set","COW","COW_TOKENS","useTokenDistroContract","useContract","TOKEN_DISTRO_CONTRACT_ADDRESSES","TOKEN_DISTRO_ABI","useCowFromLockedGnoBalances","account","useWeb3React","allocated","initialAllocation","useRef","CurrencyAmount","fromRawAmount","current","allocation","setAllocation","useEffect","canceled","claim","amount","useAllocation","vested","multiply","Math","min","Date","now","LOCKED_GNO_VESTING_START_TIME","LOCKED_GNO_VESTING_DURATION","divide","tokenDistro","useSingleCallResult","greaterThan","undefined","result","loading","claimed","useMemo","toString","useClaimCowFromLockedGnoCallback","isFirstClaim","merkleDrop","MERKLE_DROP_CONTRACT_ADDRESSES","MERKLE_DROP_ABI","addTransaction","useTransactionAdder","Error","index","proof","claimPromise","summary","CLAIM_VESTED_COW","tx","swapLockedGNOvCow","hash","finally","ClaimStatus","LockedGnoVesting","ChainId","INITIAL","status","setStatus","unvested","subtract","allocatedFormatted","formatSmartLocaleAware","AMOUNT_PRECISION","vestedFormatted","unvestedFormatted","claimableFormatted","previousAccount","usePrevious","canClaim","isClaimPending","SUBMITTED","useErrorModal","handleSetError","handleCloseError","ErrorModal","equalTo","claimCallback","contractAddress","handleClaim","ATTEMPTING","claimAnalytics","wait","success","CONFIRMED","setTimeout","catch","error","errorMessage","errorCode","isRejected","isRejectRequestProviderError","getProviderErrorMessage","code","console","showLoader","hAlign","src","cowImage","alt","width","height","wrap","content","size","titleSize","altColor","formatDateWithTimezone","LOCKED_GNO_VESTING_START_DATE","Button","disabled","buttonSize","ButtonSize","SMALL","onClick","ArrowIcon","href","getBlockExplorerUrl","Copy","toCopy","title","COW_DECIMALS","decimals","Profile","provider","connector","blockNumber","useBlockNumber","confirmationBlock","setConfirmationBlock","shouldUpdate","setShouldUpdate","setSwapVCowStatus","useSetSwapVCowStatus","swapVCowStatus","useSwapVCowStatus","isMetaMask","isLockedGnoLoading","lockedGnoBalances","cow","useTokenBalance","useVCowData","total","isVCowLoading","isLoading","hasVestedBalance","hasVCowBalance","isSwapPending","SwapVCowStatus","isSwapInitial","isSwapConfirmed","isSwapDisabled","Boolean","isCardsLoading","output","cowBalance","cowBalanceMax","formatMax","vCowBalanceVested","vCowBalanceVestedMax","vCowBalanceUnvested","vCowBalance","vCowBalanceMax","CONVERT_VCOW","swapCallback","useSwapVCowCallback","handleVCowSwap","tooltipText","balanceBreakdown","renderConvertToCowContent","currencyCOW","style","minHeight","vCOWImage","V_COW_CONTRACT_ADDRESS","CowImage","COW_CONTRACT_ADDRESS","AddToMetamask","shortLabel","currency","to"],"mappings":"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","file":"static/js/account.ed6c749d.chunk.js","sourcesContent":["import { useState, useCallback } from 'react'\nimport TransactionConfirmationModal from 'components/TransactionConfirmationModal'\nimport { OperationType } from 'components/TransactionConfirmationModal'\nimport { useOpenModal, useCloseModals, useModalIsOpen } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/reducer'\n\nexport default function useTransactionConfirmationModal(\n  defaultOperationType: OperationType = OperationType.WRAP_ETHER\n) {\n  const [operationType, setOperationType] = useState<OperationType>(defaultOperationType)\n  const [transactionConfirmationModalMsg, setTransactionConfirmationModalMsg] = useState<string>()\n  const openTransactionConfirmationModalAux = useOpenModal(ApplicationModal.TRANSACTION_CONFIRMATION)\n  const closeModal = useCloseModals()\n  const showTransactionConfirmationModal = useModalIsOpen(ApplicationModal.TRANSACTION_CONFIRMATION)\n  const openModal = useCallback(\n    (message: string, operationType: OperationType) => {\n      setTransactionConfirmationModalMsg(message)\n      setOperationType(operationType)\n      openTransactionConfirmationModalAux()\n    },\n    [setTransactionConfirmationModalMsg, openTransactionConfirmationModalAux]\n  )\n\n  return {\n    openModal,\n    closeModal,\n    TransactionConfirmationModal: useCallback(\n      () => (\n        <TransactionConfirmationModal\n          attemptingTxn={true}\n          isOpen={showTransactionConfirmationModal}\n          pendingText={transactionConfirmationModalMsg}\n          onDismiss={closeModal}\n          operationType={operationType}\n        />\n      ),\n      [closeModal, operationType, showTransactionConfirmationModal, transactionConfirmationModalMsg]\n    ),\n  }\n}\n","export default __webpack_public_path__ + \"static/media/arrow.b28a71df.svg\";","import { SupportedChainId } from 'constants/chains'\nimport mainnetIndex from './mainnet.json'\nimport rinkebyIndex from './rinkeby.json'\nimport gnosisChainIndex from './gnosisChain.json'\nimport goerliIndex from './goerli.json'\nimport { supportedChainId } from 'utils/supportedChainId'\n\ninterface Claim {\n  index: number\n  amount: string\n  proof: string[]\n}\n\nconst indexFiles = {\n  [SupportedChainId.MAINNET]: mainnetIndex,\n  [SupportedChainId.RINKEBY]: rinkebyIndex,\n  [SupportedChainId.GNOSIS_CHAIN]: gnosisChainIndex,\n  [SupportedChainId.GOERLI]: goerliIndex,\n}\n\nconst chainNames = {\n  [SupportedChainId.MAINNET]: 'mainnet',\n  [SupportedChainId.RINKEBY]: 'rinkeby',\n  [SupportedChainId.GNOSIS_CHAIN]: 'gnosisChain',\n  [SupportedChainId.GOERLI]: 'goerli',\n}\n\nconst DISTRO_REPO_BRANCH_NAME = 'main'\n\nexport const fetchClaim = async (address: string, chainId: SupportedChainId): Promise<Claim | null> => {\n  const lowerCaseAddress = address.toLowerCase()\n\n  if (!supportedChainId(chainId)) {\n    return null\n  }\n\n  const indexFile = indexFiles[chainId]\n  const chainName = chainNames[chainId]\n  const chunkIndex = lookupChunkIndex(indexFile, lowerCaseAddress)\n  if (chunkIndex === -1) return null // address is lower than the lowest address in the index, which means it's ineligible\n\n  const chunk = await fetchChunk(`${chainName}/chunk_${chunkIndex}.json`)\n  return chunk[lowerCaseAddress] || null\n}\n\n// The merkle proof data has been sorted by address in ascending order and then chunked up.\n// see: https://github.com/gnosis/locked-gno-cow-merkle-distro/blob/main/chunkClaimData.js\n// Our index json gives the first address of each chunk.\n// This function returns the chunk index for the given address, or -1 if the address is lower than the lowest address in the index.\nconst lookupChunkIndex = (\n  chunkIndexJson: typeof mainnetIndex | typeof rinkebyIndex | typeof gnosisChainIndex,\n  address: string\n) => {\n  let nextChunkIndex = chunkIndexJson.findIndex((a) => address < a)\n  if (nextChunkIndex === -1) nextChunkIndex = chunkIndexJson.length\n  return nextChunkIndex - 1\n}\n\nconst chunkCache = new Map<string, Promise<Record<string, Claim>>>()\nconst fetchChunk = (path: string) => {\n  const promise =\n    chunkCache.get(path) ??\n    (fetch(\n      `https://raw.githubusercontent.com/gnosis/locked-gno-cow-merkle-distro/${DISTRO_REPO_BRANCH_NAME}/${path}`\n    ).then((res) => res.json()) as Promise<Record<string, Claim>>)\n  chunkCache.set(path, promise)\n  return promise\n}\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { ContractTransaction } from '@ethersproject/contracts'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport MERKLE_DROP_ABI from 'abis/MerkleDrop.json'\nimport TOKEN_DISTRO_ABI from 'abis/TokenDistro.json'\nimport { MerkleDrop, TokenDistro } from 'abis/types'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useTransactionAdder } from 'state/enhancedTransactions/hooks'\nimport { useContract } from 'hooks/useContract'\nimport { COW as COW_TOKENS } from 'constants/tokens'\nimport { SupportedChainId } from 'constants/chains'\nimport { OperationType } from 'components/TransactionConfirmationModal'\nimport { fetchClaim } from './claimData'\nimport { MERKLE_DROP_CONTRACT_ADDRESSES, TOKEN_DISTRO_CONTRACT_ADDRESSES } from 'constants/tokens'\nimport { LOCKED_GNO_VESTING_START_TIME, LOCKED_GNO_VESTING_DURATION } from 'constants/index'\n\n// We just generally use the mainnet version. We don't read from the contract anyways so the address doesn't matter\nconst COW = COW_TOKENS[SupportedChainId.MAINNET]\n\nconst useMerkleDropContract = () => useContract<MerkleDrop>(MERKLE_DROP_CONTRACT_ADDRESSES, MERKLE_DROP_ABI, true)\nconst useTokenDistroContract = () => useContract<TokenDistro>(TOKEN_DISTRO_CONTRACT_ADDRESSES, TOKEN_DISTRO_ABI, true)\n\nexport const useAllocation = (): CurrencyAmount<Token> => {\n  const { chainId, account } = useWeb3React()\n  const initialAllocation = useRef(CurrencyAmount.fromRawAmount(COW, 0))\n  const [allocation, setAllocation] = useState(initialAllocation.current)\n\n  useEffect(() => {\n    let canceled = false\n    if (account && chainId) {\n      fetchClaim(account, chainId).then((claim) => {\n        if (!canceled) {\n          setAllocation(CurrencyAmount.fromRawAmount(COW, claim?.amount ?? 0))\n        }\n      })\n    } else {\n      setAllocation(initialAllocation.current)\n    }\n    return () => {\n      canceled = true\n    }\n  }, [chainId, account, initialAllocation])\n\n  return allocation\n}\n\nexport const useCowFromLockedGnoBalances = () => {\n  const { account } = useWeb3React()\n  const allocated = useAllocation()\n  const vested = allocated\n    .multiply(Math.min(Date.now() - LOCKED_GNO_VESTING_START_TIME, LOCKED_GNO_VESTING_DURATION))\n    .divide(LOCKED_GNO_VESTING_DURATION)\n\n  const tokenDistro = useTokenDistroContract()\n  const { result, loading } = useSingleCallResult(allocated.greaterThan(0) ? tokenDistro : null, 'balances', [\n    account ?? undefined,\n  ])\n  const claimed = useMemo(() => CurrencyAmount.fromRawAmount(COW, result ? result.claimed.toString() : 0), [result])\n\n  return {\n    allocated,\n    vested,\n    claimed,\n    loading,\n  }\n}\n\ninterface ClaimCallbackParams {\n  openModal: (message: string, operationType: OperationType) => void\n  closeModal: () => void\n  isFirstClaim: boolean\n}\nexport function useClaimCowFromLockedGnoCallback({\n  openModal,\n  closeModal,\n  isFirstClaim,\n}: ClaimCallbackParams): () => Promise<ContractTransaction> {\n  const { chainId, account } = useWeb3React()\n  const merkleDrop = useMerkleDropContract()\n  const tokenDistro = useTokenDistroContract()\n\n  const addTransaction = useTransactionAdder()\n\n  const claimCallback = useCallback(async () => {\n    if (!account) {\n      throw new Error('Not connected')\n    }\n    if (!chainId) {\n      throw new Error('No chainId')\n    }\n    if (!merkleDrop || !tokenDistro) {\n      throw new Error('Contract not present')\n    }\n\n    const claim = await fetchClaim(account, chainId)\n    if (!claim) throw new Error('Trying to claim without claim data')\n\n    const { index, proof, amount } = claim\n\n    // On the very first claim we need to provide the merkle proof.\n    // Afterwards the allocation will be already in the tokenDistro contract and we can just claim it there.\n    const claimPromise = isFirstClaim ? merkleDrop.claim(index, amount, proof) : tokenDistro.claim()\n    const summary = 'Claim vested COW'\n    openModal(summary, OperationType.CLAIM_VESTED_COW)\n\n    return claimPromise\n      .then((tx) => {\n        addTransaction({\n          swapLockedGNOvCow: true,\n          hash: tx.hash,\n          summary,\n        })\n        return tx\n      })\n      .finally(closeModal)\n  }, [account, addTransaction, chainId, closeModal, openModal, isFirstClaim, merkleDrop, tokenDistro])\n\n  return claimCallback\n}\n","import { Trans } from '@lingui/macro'\nimport { useCallback, useState, useEffect } from 'react'\nimport SVG from 'react-inlinesvg'\nimport { Card, BalanceDisplay, ConvertWrapper, VestingBreakdown, CardActions, ExtLink } from 'pages/Account/styled'\nimport { ButtonPrimary } from 'custom/components/Button'\nimport { HelpCircle } from 'components/Page'\nimport { MouseoverTooltipContent } from 'components/Tooltip'\nimport cowImage from 'assets/cow-swap/cow_v2.svg'\nimport ArrowIcon from 'assets/cow-swap/arrow.svg'\nimport { AMOUNT_PRECISION } from 'constants/index'\nimport { formatSmartLocaleAware } from 'utils/format'\nimport { OperationType } from 'components/TransactionConfirmationModal'\nimport { useErrorModal } from 'hooks/useErrorMessageAndModal'\nimport CopyHelper from 'components/Copy'\nimport { getBlockExplorerUrl } from 'utils'\nimport { formatDateWithTimezone } from 'utils/time'\nimport { SupportedChainId as ChainId } from 'constants/chains'\nimport { useWeb3React } from '@web3-react/core'\nimport { MERKLE_DROP_CONTRACT_ADDRESSES, TOKEN_DISTRO_CONTRACT_ADDRESSES } from 'constants/tokens'\nimport { LOCKED_GNO_VESTING_START_DATE } from 'constants/index'\nimport { useClaimCowFromLockedGnoCallback } from './hooks'\nimport usePrevious from 'hooks/usePrevious'\nimport { CurrencyAmount, Currency } from '@uniswap/sdk-core'\n// import ReactGA from 'react-ga4'\nimport { getProviderErrorMessage, isRejectRequestProviderError } from 'utils/misc'\nimport { claimAnalytics } from 'utils/analytics'\nimport { ButtonSize } from 'theme'\n\nenum ClaimStatus {\n  INITIAL,\n  ATTEMPTING,\n  SUBMITTED,\n  CONFIRMED,\n}\n\ninterface Props {\n  openModal: (message: string, operationType: OperationType) => void\n  closeModal: () => void\n  vested: CurrencyAmount<Currency>\n  allocated: CurrencyAmount<Currency>\n  claimed: CurrencyAmount<Currency>\n  loading: boolean\n}\n\nconst LockedGnoVesting: React.FC<Props> = ({ openModal, closeModal, vested, allocated, claimed, loading }: Props) => {\n  const { chainId = ChainId.MAINNET, account } = useWeb3React()\n  const [status, setStatus] = useState<ClaimStatus>(ClaimStatus.INITIAL)\n  const unvested = allocated.subtract(vested)\n  const allocatedFormatted = formatSmartLocaleAware(allocated, AMOUNT_PRECISION) || '0'\n  const vestedFormatted = formatSmartLocaleAware(vested, AMOUNT_PRECISION) || '0'\n  const unvestedFormatted = formatSmartLocaleAware(unvested, AMOUNT_PRECISION) || '0'\n  const claimableFormatted = formatSmartLocaleAware(vested.subtract(claimed), AMOUNT_PRECISION) || '0'\n  const previousAccount = usePrevious(account)\n\n  const canClaim =\n    !loading &&\n    unvested.greaterThan(0) &&\n    status === ClaimStatus.INITIAL &&\n    MERKLE_DROP_CONTRACT_ADDRESSES[chainId] &&\n    TOKEN_DISTRO_CONTRACT_ADDRESSES[chainId]\n  const isClaimPending = status === ClaimStatus.SUBMITTED\n\n  const { handleSetError, handleCloseError, ErrorModal } = useErrorModal()\n\n  const isFirstClaim = claimed.equalTo(0)\n\n  const claimCallback = useClaimCowFromLockedGnoCallback({\n    openModal,\n    closeModal,\n    isFirstClaim,\n  })\n\n  const contractAddress = isFirstClaim\n    ? MERKLE_DROP_CONTRACT_ADDRESSES[chainId]\n    : TOKEN_DISTRO_CONTRACT_ADDRESSES[chainId]\n\n  const handleClaim = useCallback(async () => {\n    handleCloseError()\n    if (!claimCallback) {\n      return\n    }\n\n    setStatus(ClaimStatus.ATTEMPTING)\n\n    claimAnalytics('Send')\n    claimCallback()\n      .then((tx) => {\n        claimAnalytics('Sign')\n        setStatus(ClaimStatus.SUBMITTED)\n        return tx.wait()\n      })\n      .then((tx) => {\n        const success = tx.status === 1\n        setStatus(success ? ClaimStatus.CONFIRMED : ClaimStatus.INITIAL)\n\n        setTimeout(() => {\n          setStatus(ClaimStatus.INITIAL)\n        }, 5000)\n      })\n      .catch((error) => {\n        let errorMessage, errorCode\n        const isRejected = isRejectRequestProviderError(error)\n        if (isRejected) {\n          errorMessage = 'User rejected signing COW claim transaction'\n        } else {\n          errorMessage = getProviderErrorMessage(error)\n\n          if (error?.code && typeof error.code === 'number') {\n            errorCode = error.code\n          }\n          console.error('Error Signing locked GNO COW claiming', error)\n        }\n        console.error('[Profile::LockedGnoVesting::index::claimCallback]::error', errorMessage)\n        setStatus(ClaimStatus.INITIAL)\n        claimAnalytics(isRejected ? 'Reject' : 'Error', errorCode)\n        handleSetError(errorMessage)\n      })\n  }, [handleCloseError, handleSetError, claimCallback])\n\n  // Fix for enabling claim button after user changes account\n  useEffect(() => {\n    if (account && previousAccount && account !== previousAccount && status !== ClaimStatus.INITIAL) {\n      setStatus(ClaimStatus.INITIAL)\n    }\n  }, [account, previousAccount, status])\n\n  if (allocated.equalTo(0)) {\n    // don't render anything until we know that the user is actually eligible to claim\n    return null\n  }\n\n  return (\n    <>\n      <Card showLoader={loading || isClaimPending}>\n        <BalanceDisplay hAlign=\"left\">\n          <img src={cowImage} alt=\"COW token\" width=\"56\" height=\"56\" />\n          <span>\n            <i>COW vesting from locked GNO</i>\n            <b>\n              {allocatedFormatted} COW{' '}\n              <MouseoverTooltipContent\n                wrap\n                content={\n                  <VestingBreakdown>\n                    <span>\n                      <i>Unvested</i> <p>{unvestedFormatted} COW</p>\n                    </span>\n                    <span>\n                      <i>Vested</i> <p>{vestedFormatted} COW</p>\n                    </span>\n                  </VestingBreakdown>\n                }\n              >\n                <HelpCircle size={14} />\n              </MouseoverTooltipContent>\n            </b>\n          </span>\n        </BalanceDisplay>\n        <ConvertWrapper>\n          <BalanceDisplay titleSize={18} altColor={true}>\n            <i>\n              Claimable{' '}\n              <MouseoverTooltipContent\n                wrap\n                content={\n                  <div>\n                    <p>\n                      <strong>COW vesting from the GNO lock</strong> is vested linearly over four years, starting on{' '}\n                      {formatDateWithTimezone(LOCKED_GNO_VESTING_START_DATE)}.\n                    </p>\n                    <p>Each time you claim, you will receive the entire claimable amount.</p>\n                  </div>\n                }\n              >\n                <HelpCircle size={14} />\n              </MouseoverTooltipContent>\n            </i>\n            <b>{claimableFormatted}</b>\n          </BalanceDisplay>\n          {status === ClaimStatus.CONFIRMED ? (\n            <ButtonPrimary disabled>\n              <Trans>Successfully claimed</Trans>\n            </ButtonPrimary>\n          ) : (\n            <ButtonPrimary buttonSize={ButtonSize.SMALL} onClick={handleClaim} disabled={!canClaim}>\n              {isClaimPending ? (\n                'Claiming COW...'\n              ) : (\n                <>\n                  Claim COW <SVG src={ArrowIcon} />\n                </>\n              )}\n            </ButtonPrimary>\n          )}\n        </ConvertWrapper>\n\n        <CardActions>\n          <ExtLink href={getBlockExplorerUrl(chainId, contractAddress, 'address')}>View contract ↗</ExtLink>\n          <CopyHelper toCopy={contractAddress}>\n            <div title=\"Click to copy contract address\">Copy contract</div>\n          </CopyHelper>\n        </CardActions>\n      </Card>\n\n      <ErrorModal />\n    </>\n  )\n}\n\nexport default LockedGnoVesting\n","import { Trans } from '@lingui/macro'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport {\n  ExtLink,\n  Card,\n  CardActions,\n  BalanceDisplay,\n  ConvertWrapper,\n  VestingBreakdown,\n  CardsLoader,\n  CardsSpinner,\n} from 'pages/Account/styled'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBlockExplorerUrl } from 'utils'\nimport { formatMax, formatSmartLocaleAware } from 'utils/format'\nimport { MouseoverTooltipContent } from 'components/Tooltip'\nimport { SupportedChainId as ChainId } from 'constants/chains'\nimport { HelpCircle } from 'components/Page'\nimport { ButtonPrimary } from 'custom/components/Button'\nimport vCOWImage from 'assets/cow-swap/vCOW.png'\nimport SVG from 'react-inlinesvg'\nimport ArrowIcon from 'assets/cow-swap/arrow.svg'\nimport CowImage from 'assets/cow-swap/cow_v2.svg'\nimport { useTokenBalance } from 'state/connection/hooks'\nimport { useVCowData, useSwapVCowCallback, useSetSwapVCowStatus, useSwapVCowStatus } from 'state/cowToken/hooks'\nimport { V_COW_CONTRACT_ADDRESS, COW_CONTRACT_ADDRESS, AMOUNT_PRECISION } from 'constants/index'\nimport { COW } from 'constants/tokens'\nimport { useErrorModal } from 'hooks/useErrorMessageAndModal'\nimport { OperationType } from 'components/TransactionConfirmationModal'\nimport useTransactionConfirmationModal from 'hooks/useTransactionConfirmationModal'\nimport AddToMetamask from 'components/AddToMetamask'\nimport { Link } from 'react-router-dom'\nimport CopyHelper from 'components/Copy'\nimport { SwapVCowStatus } from 'state/cowToken/actions'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport usePrevious from 'hooks/usePrevious'\nimport LockedGnoVesting from './LockedGnoVesting'\nimport { useCowFromLockedGnoBalances } from 'pages/Account/LockedGnoVesting/hooks'\nimport { getProviderErrorMessage } from 'utils/misc'\nimport { MetaMask } from '@web3-react/metamask'\n\nconst COW_DECIMALS = COW[ChainId.MAINNET].decimals\n\n// Number of blocks to wait before we re-enable the swap COW -> vCOW button after confirmation\nconst BLOCKS_TO_WAIT = 2\n\nexport default function Profile() {\n  const { account, chainId = ChainId.MAINNET, provider, connector } = useWeb3React()\n  const previousAccount = usePrevious(account)\n\n  const blockNumber = useBlockNumber()\n  const [confirmationBlock, setConfirmationBlock] = useState<undefined | number>(undefined)\n  const [shouldUpdate, setShouldUpdate] = useState<boolean>(false)\n\n  const setSwapVCowStatus = useSetSwapVCowStatus()\n  const swapVCowStatus = useSwapVCowStatus()\n\n  const isMetaMask = (connector as MetaMask)?.provider?.isMetaMask\n\n  // Locked GNO balance\n  const { loading: isLockedGnoLoading, ...lockedGnoBalances } = useCowFromLockedGnoBalances()\n\n  // Cow balance\n  const cow = useTokenBalance(account || undefined, chainId ? COW[chainId] : undefined)\n\n  // vCow balance values\n  const { unvested, vested, total, isLoading: isVCowLoading } = useVCowData()\n\n  // Boolean flags\n  const hasVestedBalance = vested && !vested.equalTo(0)\n  const hasVCowBalance = total && !total.equalTo(0)\n\n  const isSwapPending = swapVCowStatus === SwapVCowStatus.SUBMITTED\n  const isSwapInitial = swapVCowStatus === SwapVCowStatus.INITIAL\n  const isSwapConfirmed = swapVCowStatus === SwapVCowStatus.CONFIRMED\n  const isSwapDisabled = Boolean(\n    !hasVestedBalance || !isSwapInitial || isSwapPending || isSwapConfirmed || shouldUpdate\n  )\n\n  const isCardsLoading = useMemo(() => {\n    let output = isVCowLoading || isLockedGnoLoading || !provider\n\n    // remove loader after 5 sec in any case\n    setTimeout(() => {\n      output = false\n    }, 5000)\n\n    return output\n  }, [isLockedGnoLoading, isVCowLoading, provider])\n\n  const cowBalance = formatSmartLocaleAware(cow, AMOUNT_PRECISION) || '0'\n  const cowBalanceMax = formatMax(cow, COW_DECIMALS) || '0'\n  const vCowBalanceVested = formatSmartLocaleAware(shouldUpdate ? undefined : vested, AMOUNT_PRECISION) || '0'\n  const vCowBalanceVestedMax = vested ? formatMax(shouldUpdate ? undefined : vested, COW_DECIMALS) : '0'\n  const vCowBalanceUnvested = formatSmartLocaleAware(unvested, AMOUNT_PRECISION) || '0'\n  const vCowBalance = formatSmartLocaleAware(total, AMOUNT_PRECISION) || '0'\n  const vCowBalanceMax = total ? formatMax(total, COW_DECIMALS) : '0'\n\n  // Init modal hooks\n  const { handleSetError, handleCloseError, ErrorModal } = useErrorModal()\n  const { TransactionConfirmationModal, openModal, closeModal } = useTransactionConfirmationModal(\n    OperationType.CONVERT_VCOW\n  )\n\n  // Handle swaping\n  const { swapCallback } = useSwapVCowCallback({\n    openModal,\n    closeModal,\n  })\n\n  const handleVCowSwap = useCallback(async () => {\n    handleCloseError()\n\n    if (!swapCallback) {\n      return\n    }\n\n    setSwapVCowStatus(SwapVCowStatus.ATTEMPTING)\n\n    swapCallback()\n      .then(() => {\n        setSwapVCowStatus(SwapVCowStatus.SUBMITTED)\n      })\n      .catch((error) => {\n        console.error('[Profile::index::swapVCowCallback]::error', error)\n        setSwapVCowStatus(SwapVCowStatus.INITIAL)\n        handleSetError(getProviderErrorMessage(error))\n      })\n  }, [handleCloseError, handleSetError, setSwapVCowStatus, swapCallback])\n\n  const tooltipText = {\n    balanceBreakdown: (\n      <VestingBreakdown>\n        <span>\n          <i>Unvested</i> <p>{vCowBalanceUnvested} vCOW</p>\n        </span>\n        <span>\n          <i>Vested</i> <p>{vCowBalanceVested} vCOW</p>\n        </span>\n      </VestingBreakdown>\n    ),\n    vested: (\n      <div>\n        <p>\n          <strong>Vested vCOW</strong> is the portion of your vCOW token balance, which is fully available to convert to\n          COW token.\n        </p>\n        <p>\n          This includes any vCOW received through an <strong>airdrop.</strong>\n        </p>\n        <p>When converting your vested vCOW balance to COW, your entire vested balance will be converted.</p>\n      </div>\n    ),\n  }\n\n  const renderConvertToCowContent = useCallback(() => {\n    let content = null\n\n    if (isSwapPending) {\n      content = <span>Converting vCOW...</span>\n    } else if (isSwapConfirmed) {\n      content = <span>Successfully converted!</span>\n    } else {\n      content = (\n        <>\n          Convert to COW <SVG src={ArrowIcon} />\n        </>\n      )\n    }\n\n    return content\n  }, [isSwapConfirmed, isSwapPending])\n\n  // Fixes the issue with change in status after swap confirmation\n  // Makes sure to wait 2 blocks after confirmation to enable the swap button again\n  useEffect(() => {\n    if (isSwapConfirmed && !confirmationBlock) {\n      setConfirmationBlock(blockNumber)\n      setShouldUpdate(true)\n    }\n\n    if (!confirmationBlock || !blockNumber) {\n      return\n    }\n\n    if (isSwapConfirmed && blockNumber - confirmationBlock > BLOCKS_TO_WAIT && hasVestedBalance) {\n      setSwapVCowStatus(SwapVCowStatus.INITIAL)\n      setConfirmationBlock(undefined)\n      setShouldUpdate(false)\n    }\n  }, [blockNumber, confirmationBlock, hasVestedBalance, isSwapConfirmed, setSwapVCowStatus, shouldUpdate])\n\n  // Reset swap button status on account change\n  useEffect(() => {\n    if (account && previousAccount && account !== previousAccount && !isSwapInitial) {\n      setSwapVCowStatus(SwapVCowStatus.INITIAL)\n    }\n  }, [account, isSwapInitial, previousAccount, setSwapVCowStatus])\n\n  const currencyCOW = COW[chainId]\n\n  return (\n    <>\n      <TransactionConfirmationModal />\n      <ErrorModal />\n\n      {isCardsLoading ? (\n        <CardsLoader style={{ minHeight: '200px' }}>\n          <CardsSpinner size=\"24px\" />\n        </CardsLoader>\n      ) : (\n        <>\n          {hasVCowBalance && (\n            <Card showLoader={isVCowLoading || isSwapPending}>\n              <BalanceDisplay hAlign=\"left\">\n                <img src={vCOWImage} alt=\"vCOW token\" width=\"56\" height=\"56\" />\n                <span>\n                  <i>\n                    <Trans>Total vCOW balance</Trans>\n                  </i>\n                  <b>\n                    <span title={`${vCowBalanceMax} vCOW`}>{vCowBalance} vCOW</span>{' '}\n                    <MouseoverTooltipContent content={tooltipText.balanceBreakdown} wrap>\n                      <HelpCircle size={14} />\n                    </MouseoverTooltipContent>\n                  </b>\n                </span>\n              </BalanceDisplay>\n              <ConvertWrapper>\n                <BalanceDisplay titleSize={18} altColor={true}>\n                  <i>\n                    Vested{' '}\n                    <MouseoverTooltipContent content={tooltipText.vested} wrap>\n                      <HelpCircle size={14} />\n                    </MouseoverTooltipContent>\n                  </i>\n                  <b title={`${vCowBalanceVestedMax} vCOW`}>{vCowBalanceVested}</b>\n                </BalanceDisplay>\n                <ButtonPrimary onClick={handleVCowSwap} disabled={isSwapDisabled}>\n                  {renderConvertToCowContent()}\n                </ButtonPrimary>\n              </ConvertWrapper>\n\n              <CardActions>\n                <ExtLink href={getBlockExplorerUrl(chainId, V_COW_CONTRACT_ADDRESS[chainId], 'token')}>\n                  View contract ↗\n                </ExtLink>\n                <CopyHelper toCopy={V_COW_CONTRACT_ADDRESS[chainId]}>\n                  <div title=\"Click to copy token contract address\">Copy contract</div>\n                </CopyHelper>\n              </CardActions>\n            </Card>\n          )}\n\n          <Card>\n            <BalanceDisplay titleSize={26}>\n              <img src={CowImage} alt=\"Cow Balance\" height=\"80\" width=\"80\" />\n              <span>\n                <i>Available COW balance</i>\n                <b title={`${cowBalanceMax} COW`}>{cowBalance} COW</b>\n              </span>\n            </BalanceDisplay>\n            <CardActions>\n              <ExtLink\n                title=\"View contract\"\n                href={getBlockExplorerUrl(chainId, COW_CONTRACT_ADDRESS[chainId], 'token')}\n              >\n                View contract ↗\n              </ExtLink>\n\n              {isMetaMask && <AddToMetamask shortLabel currency={currencyCOW} />}\n\n              {!isMetaMask && (\n                <CopyHelper toCopy={COW_CONTRACT_ADDRESS[chainId]}>\n                  <div title=\"Click to copy token contract address\">Copy contract</div>\n                </CopyHelper>\n              )}\n\n              <Link to={`/swap?outputCurrency=${COW_CONTRACT_ADDRESS[chainId]}`}>Buy COW</Link>\n            </CardActions>\n          </Card>\n\n          <LockedGnoVesting\n            {...lockedGnoBalances}\n            loading={isLockedGnoLoading}\n            openModal={openModal}\n            closeModal={closeModal}\n          />\n        </>\n      )}\n    </>\n  )\n}\n"],"sourceRoot":""}