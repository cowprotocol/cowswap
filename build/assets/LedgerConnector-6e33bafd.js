


import{am as s,av as c}from"./vendor-35db3a09.js";function n(r){return Number.parseInt(String(r),16)}class d extends s{constructor({actions:t,onError:i,kit:a,options:o={}}){super(t,i),this.onAccountsChanged=e=>{e.length===0?this.actions.resetState():this.actions.update({accounts:e})},this.onChainChanged=e=>{this.actions.update({chainId:n(e)})},this.onDisconnect=e=>{this.actions.resetState(),this.onError?.(e)},this.options=o,this.kit=a}async getAccounts(){return await(await this.getProvider()).request({method:"eth_requestAccounts"})}async getChainId(){const i=await(await this.getProvider()).request({method:"eth_chainId"});return n(i)}async getProvider({forceCreate:t}={forceCreate:!1}){if(!this.provider||t){const i=await this.kit.getProvider();this.provider=i}return this.provider}async getSigner(){const[t,i]=await Promise.all([this.getProvider(),this.getAccounts()]);return new c(t).getSigner(i[0])}async activateLedgerKit(){const t=this.kit;await t.enableDebugLogs(),await t.checkSupport({providerType:"Ethereum",chainId:this.options.chainId,infuraId:this.options.infuraId,rpc:this.options.rpc})}async activateProvider(){if(!this.provider)return;this.provider.on&&(this.provider.on("accountsChanged",this.onAccountsChanged),this.provider.on("chainChanged",this.onChainChanged),this.provider.on("disconnect",this.onDisconnect),this.provider.on("close",this.onDisconnect));const t=await this.getAccounts(),i=await this.getChainId();return this.actions.update({chainId:i,accounts:t})}async activate(){await this.activateLedgerKit(),await this.getProvider({forceCreate:!0}),await this.activateProvider()}async connectEagerly(){const t=this.actions.startActivation();try{if(await this.activateLedgerKit(),await this.getProvider({forceCreate:!0}),!this.provider?.connected)return t();this.activateProvider()}catch(i){throw t(),i}}async deactivate(){await this.provider?.disconnect(),this.provider=void 0,this.eagerConnection=void 0,this.actions.resetState()}}export{d as Ledger};
